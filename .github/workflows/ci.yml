name: CI/CD

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:

jobs:
  test:
    name: üß™ Tests & Linting
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'run-ci') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: TypeScript type checking
        run: npx tsc --noEmit
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run tests
        run: npm run test:once
        
      - name: Run tests with coverage (Node 20 only)
        if: matrix.node-version == '20'
        run: npm run test:coverage
        
      - name: Upload coverage reports
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: üèóÔ∏è Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.event.pull_request.labels.*.name, 'run-ci') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Analyze bundle size
        run: |
          echo "üì¶ Bundle Size Analysis"
          echo "======================="
          ls -lh dist/assets/
          echo ""
          echo "üîç Detailed breakdown:"
          du -h dist/assets/* | sort -hr
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  lighthouse:
    name: üö® Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.event.pull_request.labels.*.name, 'run-ci') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Start server
        run: |
          npx serve -s dist -l 8080 --no-clipboard &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
      - name: Wait for server to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8080/ >/dev/null 2>&1; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done
          
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Stop server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          
      - name: Prepare artifacts for upload
        if: always()
        run: |
          mkdir -p artifacts
          if [ -d ".lighthouseci" ]; then
            cp -r .lighthouseci/* artifacts/ 2>/dev/null || echo "No files to copy"
          else
            echo "Lighthouse CI did not run - $(date)" > artifacts/lighthouse-error.txt
          fi
          
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: artifacts/
          retention-days: 7

  performance-budget:
    name: üìä Performance Budget Check
    runs-on: ubuntu-latest
    needs: lighthouse
    if: contains(github.event.pull_request.labels.*.name, 'run-ci') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download Lighthouse results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results
          path: ./
          
      - name: Check Performance Budget
        run: |
          echo "üöÄ Performance Budget Check"
          echo "==========================="
          
          # Check if lighthouse error file exists
          if [ -f "lighthouse-error.txt" ]; then
            echo "‚ùå Lighthouse CI did not run successfully"
            cat lighthouse-error.txt
            echo "Failing pipeline due to missing lighthouse results"
            exit 1
          fi
          
          # Check if lighthouse results exist
          if [ ! -f "assertion-results.json" ]; then
            echo "‚ùå No Lighthouse results found - assertion-results.json missing"
            echo "Failing pipeline due to missing lighthouse results"
            exit 1
          fi
          
          # Check if JSON results exist
          if ! ls lhr-*.json 1> /dev/null 2>&1; then
            echo "‚ùå No Lighthouse JSON results found"
            echo "Failing pipeline due to missing lighthouse results"
            exit 1
          fi
          
          # Extract performance scores from latest run
          PERF_SCORE=$(cat lhr-*.json | jq -r '.categories.performance.score * 100' | head -1)
          ACCESSIBILITY_SCORE=$(cat lhr-*.json | jq -r '.categories.accessibility.score * 100' | head -1)
          BEST_PRACTICES_SCORE=$(cat lhr-*.json | jq -r '.categories."best-practices".score * 100' | head -1)
          SEO_SCORE=$(cat lhr-*.json | jq -r '.categories.seo.score * 100' | head -1)
          
          echo "Performance: ${PERF_SCORE}%"
          echo "Accessibility: ${ACCESSIBILITY_SCORE}%"
          echo "Best Practices: ${BEST_PRACTICES_SCORE}%"
          echo "SEO: ${SEO_SCORE}%"
          echo ""
          
          # Set performance budgets
          PERF_BUDGET=80
          ACCESSIBILITY_BUDGET=95
          BEST_PRACTICES_BUDGET=90
          SEO_BUDGET=90
          
          # Check budgets
          if (( $(echo "$PERF_SCORE < $PERF_BUDGET" | bc -l) )); then
            echo "‚ùå Performance score ($PERF_SCORE%) is below budget ($PERF_BUDGET%)"
            exit 1
          fi
          
          if (( $(echo "$ACCESSIBILITY_SCORE < $ACCESSIBILITY_BUDGET" | bc -l) )); then
            echo "‚ùå Accessibility score ($ACCESSIBILITY_SCORE%) is below budget ($ACCESSIBILITY_BUDGET%)"
            exit 1
          fi
          
          if (( $(echo "$BEST_PRACTICES_SCORE < $BEST_PRACTICES_BUDGET" | bc -l) )); then
            echo "‚ùå Best Practices score ($BEST_PRACTICES_SCORE%) is below budget ($BEST_PRACTICES_BUDGET%)"
            exit 1
          fi
          
          if (( $(echo "$SEO_SCORE < $SEO_BUDGET" | bc -l) )); then
            echo "‚ùå SEO score ($SEO_SCORE%) is below budget ($SEO_BUDGET%)"
            exit 1
          fi
          
          echo "‚úÖ All performance budgets met!" 