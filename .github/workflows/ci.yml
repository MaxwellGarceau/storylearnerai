name: CI/CD

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:

jobs:
  test:
    name: üß™ Tests & Linting
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'run-ci') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: TypeScript type checking
        run: npx tsc --noEmit
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run tests
        run: npm run test:once
        
      - name: Run tests with coverage (Node 20 only)
        if: matrix.node-version == '20'
        run: npm run test:coverage
        
      - name: Upload coverage reports
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: üèóÔ∏è Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.event.pull_request.labels.*.name, 'run-ci') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Analyze bundle size
        run: |
          echo "üì¶ Bundle Size Analysis"
          echo "======================="
          ls -lh dist/assets/
          echo ""
          echo "üîç Detailed breakdown:"
          du -h dist/assets/* | sort -hr
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  lighthouse:
    name: üö® Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.event.pull_request.labels.*.name, 'run-ci') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Debug job conditions
        run: |
          echo "=== Job Condition Debug ==="
          echo "Event name: ${{ github.event_name }}"
          echo "PR labels: ${{ toJson(github.event.pull_request.labels.*.name) }}"
          echo "Contains run-ci: ${{ contains(github.event.pull_request.labels.*.name, 'run-ci') }}"
          echo "Is workflow_dispatch: ${{ github.event_name == 'workflow_dispatch' }}"
          echo "Job should run: ${{ contains(github.event.pull_request.labels.*.name, 'run-ci') || github.event_name == 'workflow_dispatch' }}"
          echo "========================="
          
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Start server
        run: |
          npx serve -s dist -l 8080 --no-clipboard &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
      - name: Wait for server to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8080/ >/dev/null 2>&1; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done
          
      - name: Verify server is responding
        run: |
          curl -v http://localhost:8080/
          
      - name: Run Lighthouse CI
        run: |
          echo "=== Running Lighthouse CI ==="
          echo "Current working directory: $(pwd)"
          echo "Lighthouse CI version: $(lhci --version)"
          echo "Starting lighthouse CI..."
          
          # Run lighthouse CI and capture exit code
          lhci autorun
          LHCI_EXIT_CODE=$?
          
          echo "Lighthouse CI finished with exit code: $LHCI_EXIT_CODE"
          
          # Check if .lighthouseci directory was created
          if [ -d ".lighthouseci/" ]; then
            echo "‚úÖ Lighthouse CI created .lighthouseci/ directory"
            echo "Contents:"
            ls -la .lighthouseci/
          else
            echo "‚ùå Lighthouse CI did not create .lighthouseci/ directory"
          fi
          
          # Exit with the original lighthouse CI exit code
          exit $LHCI_EXIT_CODE
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Stop server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          
      - name: Verify Lighthouse results exist
        if: always()
        run: |
          echo "=== Debugging Lighthouse Results ==="
          echo "Current working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          echo "Checking for Lighthouse results..."
          ls -la .lighthouseci/ || echo "No .lighthouseci directory found"
          
          if [ -d ".lighthouseci/" ]; then
            echo "‚úÖ .lighthouseci/ directory exists!"
            echo "Contents:"
            ls -la .lighthouseci/
            echo "Found $(ls -1 .lighthouseci/ | wc -l) files in .lighthouseci/"
          else
            echo "‚ùå .lighthouseci/ directory not found"
            echo "Creating empty .lighthouseci directory for artifact upload"
            mkdir -p .lighthouseci/
            echo "Lighthouse CI did not run successfully - $(date)" > .lighthouseci/error.txt
            echo "Error details: Previous lighthouse step may have failed" >> .lighthouseci/error.txt
            echo "GitHub Actions Exit Code: $?" >> .lighthouseci/error.txt
            echo "Working Directory: $(pwd)" >> .lighthouseci/error.txt
            
            # Verify the directory was created
            if [ -d ".lighthouseci/" ]; then
              echo "‚úÖ Successfully created .lighthouseci/ directory"
              ls -la .lighthouseci/
            else
              echo "‚ùå Failed to create .lighthouseci/ directory"
              exit 1
            fi
          fi
          
      - name: Pre-upload verification
        if: always()
        run: |
          echo "=== Pre-upload verification ==="
          echo "Working directory: $(pwd)"
          echo "Full path: $(realpath .)"
          echo "Files to upload:"
          if [ -d ".lighthouseci" ]; then
            echo "Directory exists at: $(realpath .lighthouseci)"
            find .lighthouseci -type f -exec ls -la {} \;
          else
            echo "No .lighthouseci directory found"
          fi
          echo "Directory structure:"
          ls -la
          echo "========================"
          
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: |
            .lighthouseci
          retention-days: 7

  performance-budget:
    name: üìä Performance Budget Check
    runs-on: ubuntu-latest
    needs: lighthouse
    if: (contains(github.event.pull_request.labels.*.name, 'run-ci') || github.event_name == 'workflow_dispatch') && always()
    
    steps:
      - name: Download Lighthouse results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results
          path: ./
        continue-on-error: true
          
      - name: Post-download verification
        if: always()
        run: |
          echo "=== Post-download verification ==="
          echo "Working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          if [ -d ".lighthouseci" ]; then
            echo "Contents of .lighthouseci/:"
            ls -la .lighthouseci/
          else
            echo "No .lighthouseci directory found after download"
          fi
          echo "========================"
          
      - name: Check Performance Budget
        run: |
          echo "üöÄ Performance Budget Check"
          echo "==========================="
          
          # Check if lighthouse results directory exists
          if [ ! -d ".lighthouseci/" ]; then
            echo "‚ö†Ô∏è  No Lighthouse results found - artifact may not have been uploaded"
            echo "Skipping performance budget check"
            exit 0
          fi
          
          # Check if lighthouse results exist
          if [ -f .lighthouseci/error.txt ]; then
            echo "‚ö†Ô∏è  Lighthouse CI did not run successfully"
            echo "Skipping performance budget check"
            exit 0
          fi
          
          # Check if JSON results exist
          if ! ls .lighthouseci/lhr-*.json 1> /dev/null 2>&1; then
            echo "‚ö†Ô∏è  No Lighthouse JSON results found"
            echo "Skipping performance budget check"
            exit 0
          fi
          
          # Extract performance scores from latest run
          PERF_SCORE=$(cat .lighthouseci/lhr-*.json | jq -r '.categories.performance.score * 100' | head -1)
          ACCESSIBILITY_SCORE=$(cat .lighthouseci/lhr-*.json | jq -r '.categories.accessibility.score * 100' | head -1)
          BEST_PRACTICES_SCORE=$(cat .lighthouseci/lhr-*.json | jq -r '.categories."best-practices".score * 100' | head -1)
          SEO_SCORE=$(cat .lighthouseci/lhr-*.json | jq -r '.categories.seo.score * 100' | head -1)
          
          echo "Performance: ${PERF_SCORE}%"
          echo "Accessibility: ${ACCESSIBILITY_SCORE}%"
          echo "Best Practices: ${BEST_PRACTICES_SCORE}%"
          echo "SEO: ${SEO_SCORE}%"
          echo ""
          
          # Set performance budgets
          PERF_BUDGET=80
          ACCESSIBILITY_BUDGET=95
          BEST_PRACTICES_BUDGET=90
          SEO_BUDGET=90
          
          # Check budgets
          if (( $(echo "$PERF_SCORE < $PERF_BUDGET" | bc -l) )); then
            echo "‚ùå Performance score ($PERF_SCORE%) is below budget ($PERF_BUDGET%)"
            exit 1
          fi
          
          if (( $(echo "$ACCESSIBILITY_SCORE < $ACCESSIBILITY_BUDGET" | bc -l) )); then
            echo "‚ùå Accessibility score ($ACCESSIBILITY_SCORE%) is below budget ($ACCESSIBILITY_BUDGET%)"
            exit 1
          fi
          
          if (( $(echo "$BEST_PRACTICES_SCORE < $BEST_PRACTICES_BUDGET" | bc -l) )); then
            echo "‚ùå Best Practices score ($BEST_PRACTICES_SCORE%) is below budget ($BEST_PRACTICES_BUDGET%)"
            exit 1
          fi
          
          if (( $(echo "$SEO_SCORE < $SEO_BUDGET" | bc -l) )); then
            echo "‚ùå SEO score ($SEO_SCORE%) is below budget ($SEO_BUDGET%)"
            exit 1
          fi
          
          echo "‚úÖ All performance budgets met!" 